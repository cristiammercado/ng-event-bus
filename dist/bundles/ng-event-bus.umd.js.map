{"version":3,"file":"ng-event-bus.umd.js","sources":["../../src/lib/meta-data.ts","../../src/lib/ng-event-bus.ts","../../src/public-api.ts","../../src/ng-event-bus.ts"],"sourcesContent":["/* tslint:disable:variable-name */\n\n/**\n * Metadata of the messages sent through the events bus.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 3.0.0\n */\nexport class MetaData {\n  /**\n   * A unique identifier of the message sent through the events bus.\n   * @private\n   */\n  private readonly _id: string;\n\n  /**\n   * Original key associated to the message.\n   * @private\n   */\n  private readonly _key: string;\n\n  /**\n   * Data associated to message. It's optional.\n   * @private\n   */\n  private readonly _data: any;\n\n  /**\n   * Time in milliseconds in which the message was generated.\n   * @private\n   */\n  private readonly _timestamp: number;\n\n  /**\n   * Constructor for this class.\n   *\n   * @param key Original key associated to the message sent through the events bus.\n   * @param [data] Optional: Additional data sent with the message.\n   */\n  constructor(key: string, data?: any) {\n    this._id = this.uuid();\n    this._key = key;\n    this._data = data;\n    this._timestamp = new Date().getTime();\n  }\n\n  /**\n   * Gets unique identifier of the message sent through the events bus.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Original key associated to the message.\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Data associated to message. It's optional.\n   */\n  public get data(): any {\n    return this._data;\n  }\n\n  /**\n   * Gets the time in milliseconds in which the message was generated.\n   */\n  public get timestamp(): number {\n    return this._timestamp;\n  }\n\n  /**\n   * Generates UUID version 4. The solution above uses Math.random() for brevity, however Math.random() is not\n   * guaranteed to be a high-quality RNG.\n   *\n   * @return UUID version 4.\n   */\n  private uuid(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { IEventBusMessage } from './i-event-bus-message';\nimport { MetaData } from './meta-data';\n\n/**\n * Main library class.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 2.0.0\n */\nexport class NgEventBus {\n  /**\n   * Main observable to multicast to all observers.\n   */\n  private eventBus: Subject<IEventBusMessage>;\n\n  /**\n   * Key message separator.\n   */\n  private separator = ':';\n\n  /**\n   * Constructor for this class: Initializes event bus.\n   */\n  constructor() {\n    this.eventBus = new Subject<IEventBusMessage>();\n  }\n\n  /**\n   * Validates key matching.\n   *\n   * @param  key Key to identify the message/event.\n   * @param wildcard Wildcard received from on method.\n   *\n   * @return true if key matches, false otherwise.\n   */\n  public keyMatch(key: string, wildcard: string): boolean {\n    const w = '*';\n    const ww = '**';\n\n    const partMatch = (wl: string, k: string): boolean => {\n      return wl === w || wl === k;\n    };\n\n    const sep = this.separator;\n    const kArr = key.split(sep);\n    const wArr = wildcard.split(sep);\n\n    const kLen = kArr.length;\n    const wLen = wArr.length;\n    const max = Math.max(kLen, wLen);\n\n    for (let i = 0; i < max; i++) {\n      const cK = kArr[i];\n      const cW = wArr[i];\n\n      if (cW === ww && typeof cK !== 'undefined') {\n        return true;\n      }\n\n      if (!partMatch(cW, cK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Publish a message/event to event bus.\n   *\n   * @param  key Key to identify the message/event.\n   * @param  [data] Optional: Additional data sent with the message/event.\n   * @throws {Error} key parameter must be a string and must not be empty.\n   */\n  public cast(key: string, data?: any): void {\n    if (!key.trim().length) {\n      throw new Error('key parameter must be a string and must not be empty');\n    }\n\n    const metadata: MetaData = new MetaData(key, data);\n\n    this.eventBus.next({ key, data, metadata });\n  }\n\n  /**\n   * Returns an observable you can subscribe to listen messages/events.\n   *\n   * @param key Key to identify the message/event.\n   *\n   * @return Observable you can subscribe to listen messages/events.\n   */\n  public on<T>(key: string): Observable<MetaData> {\n    return this.eventBus.asObservable().pipe(\n      filter((event: IEventBusMessage) => this.keyMatch(event.key, key)),\n      map((event: IEventBusMessage) => event.metadata)\n    );\n  }\n}\n","/*\n * Public API Surface of ng-event-bus\n */\nexport * from './lib/ng-event-bus';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Subject","filter","map"],"mappings":";;;;;;IAAA;IAEA;;;;;;;IAOA;;;;;;;QA+BE,kBAAY,GAAW,EAAE,IAAU;YACjC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;SACxC;QAKD,sBAAW,wBAAE;;;;iBAAb;gBACE,OAAO,IAAI,CAAC,GAAG,CAAC;aACjB;;;WAAA;QAKD,sBAAW,yBAAG;;;;iBAAd;gBACE,OAAO,IAAI,CAAC,IAAI,CAAC;aAClB;;;WAAA;QAKD,sBAAW,0BAAI;;;;iBAAf;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;;;WAAA;QAKD,sBAAW,+BAAS;;;;iBAApB;gBACE,OAAO,IAAI,CAAC,UAAU,CAAC;aACxB;;;WAAA;;;;;;;QAQO,uBAAI,GAAJ;YACN,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,CAAS;gBACvE,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBACnC,IAAM,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC;gBAC1C,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACvB,CAAC,CAAC;SACJ;uBACF;KAAA;;IClFD;;;;;;;;;;;QAqBE;;;;YALQ,cAAS,GAAG,GAAG,CAAC;YAMtB,IAAI,CAAC,QAAQ,GAAG,IAAIA,YAAO,EAAoB,CAAC;SACjD;;;;;;;;;QAUM,6BAAQ,GAAR,UAAS,GAAW,EAAE,QAAgB;YAC3C,IAAM,CAAC,GAAG,GAAG,CAAC;YACd,IAAM,EAAE,GAAG,IAAI,CAAC;YAEhB,IAAM,SAAS,GAAG,UAAC,EAAU,EAAE,CAAS;gBACtC,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC7B,CAAC;YAEF,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;YAC3B,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEjC,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACzB,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACzB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5B,IAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAEnB,IAAI,EAAE,KAAK,EAAE,IAAI,OAAO,EAAE,KAAK,WAAW,EAAE;oBAC1C,OAAO,IAAI,CAAC;iBACb;gBAED,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;oBACtB,OAAO,KAAK,CAAC;iBACd;aACF;YAED,OAAO,IAAI,CAAC;SACb;;;;;;;;QASM,yBAAI,GAAJ,UAAK,GAAW,EAAE,IAAU;YACjC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;aACzE;YAED,IAAM,QAAQ,GAAa,IAAI,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAEnD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;SAC7C;;;;;;;;QASM,uBAAE,GAAF,UAAM,GAAW;YAAjB,iBAKN;YAJC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CACtCC,gBAAM,CAAC,UAAC,KAAuB,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,EAClEC,aAAG,CAAC,UAAC,KAAuB,IAAK,OAAA,KAAK,CAAC,QAAQ,GAAA,CAAC,CACjD,CAAC;SACH;yBACF;KAAA;;ICrGD;;;;ICAA;;;;;;;;;;;;"}